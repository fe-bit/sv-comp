# Generated by Django 5.2.1 on 2025-06-05 08:52

from django.db import migrations, models


def convert_raw_score_to_int(apps, schema_editor):
    """Convert raw_score from string to integer"""
    Benchmark = apps.get_model('benchmarks', 'Benchmark')

    for benchmark in Benchmark.objects.all():
        if benchmark.raw_score is None or benchmark.raw_score == "":
            benchmark.raw_score = -64
        else:
            try:
                # Try to convert string to int
                benchmark.raw_score = int(float(benchmark.raw_score))
            except (ValueError, TypeError):
                # If conversion fails, set to -64
                benchmark.raw_score = -64
        benchmark.save()


def reverse_convert_raw_score_to_str(apps, schema_editor):
    """Reverse migration: convert back to string"""
    Benchmark = apps.get_model('benchmarks', 'Benchmark')

    for benchmark in Benchmark.objects.all():
        if benchmark.raw_score == -64:
            benchmark.raw_score = ""
        else:
            benchmark.raw_score = str(benchmark.raw_score)
        benchmark.save()


class Migration(migrations.Migration):

    dependencies = [
        ('benchmarks', '0008_delete_verificationspecification'),
    ]

    operations = [
        # First, run the data conversion while field is still string
        migrations.RunPython(
            convert_raw_score_to_int,
            reverse_convert_raw_score_to_str
        ),
        # Then change the field type
        migrations.AlterField(
            model_name='benchmark',
            name='raw_score',
            field=models.IntegerField(default=-64),
            preserve_default=False,
        ),
    ]
